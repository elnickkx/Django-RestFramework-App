# opposes the revoking of 3rd party django application
import django
django.setup()

import boto3
# botocore has a client Stubber for mocking the error
from botocore.stub import Stubber
import sys, unittest
from unittest.mock import patch, Mock, MagicMock
from django.contrib.auth.models import User
from django.test import TestCase, RequestFactory, Client
from django.urls import reverse
from mixer.backend.django import mixer
from poller.abstraction import abstractionLayer

sys.modules["boto3"] = Mock()
sys.modules["boto3"].resources = Mock()

class TestAbstraction(TestCase):

    def setUp(self):
        self.client = Client()
        self.boto3_mock = sys.modules["boto3"]
        self.boto3_resources_mock = sys.modules["boto3.resources"]
        self.ec2_mock = "ec2"
        self.region_mock = "eu-central-1"


    # @patch("boto3.session.Session")
    @patch("poller.abstraction.abstractionLayer.scanRegion")
    def test_client_spin_status_check_try_catch(self, abstraction_scan_region_mock ):
        region = self.region_mock

        # this what the actual class object returned
        # fetch resources type  ec2.instancesCollection(ec2.ServiceResource(), ec2.Instance)

        mock_response = {
                'i-mockInstance123': [
                            {
                            'AmiLaunchIndex': 123,
                            'ImageId': 'mock_id',
                            'InstanceId': 'mock_instance_id',
                            'InstanceType': 't1.micro',
                            'KernelId': 'mock_kernel_id',
                            'KeyName': 'mock_instance_tester',
                            'Monitoring': {
                                'State': 'disabled'
                            },
                            'Placement': {
                                'AvailabilityZone': 'us-east-2',
                                'Affinity': 'mock_high',
                                'PartitionNumber': 123,
                                'HostId': 'mock_host_id',
                                'Tenancy': 'dedicated',
                                'SpreadDomain': 'mock_spread_domain',
                                'HostResourceGroupArn': 'mock_host_resource_arn'
                                },
                            }
                        ]
                    }

        mock_tmp_credentials = [
                    "mocked_aws_access_key_id",
                    "mocked_aws_secret_access_key",
                    "mocked_aws_session_token",
        ]

        mock_scanned_regions = {
                    'Regions': [
                        {
                            'Endpoint': 'mock_endpoint_1',
                            'RegionName': 'us-east-1',
                        },
                    ]
                }

        # session_mock.region_value = region
        # session_mock.resource().Instance = "i-mockInstance123"
        

        abstraction_scan_region_mock.return_value = mock_scanned_regions
        self.boto3_mock.resources.return_value = mock_response
        instance = abstractionLayer(region)
        instance.clientSpinStatusCheck(externService=self.ec2_mock, tmpCredentials=mock_tmp_credentials)
